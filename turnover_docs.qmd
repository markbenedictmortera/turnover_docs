---
title: "Progress Report"
format:
  html:
    toc: true
    toc-depth: 6
    page-layout: full
    theme: united
    max-width: "1920"
    margin-left: 100px
    margin-right: 100px
    code-fold: true
    code-overflow: wrap
    highlight-style: github
    css: styles.css
---

## Data Preparation

You can skip/hide this part. This is just the code for the data preparation.

#####   Load objects

```{r saved_objects, warning=F}

#Load necessary objects

endpoints <- list(assets = c(v1 = "https://kc.kobotoolbox.org/api/v1/forms",
                             v2 = "https://kf.kobotoolbox.org/api/v2/assets"),
                  tokens = "https://kf.kobotoolbox.org/token/?format=json",
                  data = c(v1 = "https://kc.kobotoolbox.org/api/v1/data/",
                           v2 = "https://kf.kobotoolbox.org/api/v2/assets/"))

auth <- list(token = "7d8397035a9b3a4e52b0d3ed6b61426881139a44")

#### default colors
default_red <- "#f8766d"
default_blue <- "#00BFC4"
default_green <- "#7CAE00"



#### Designated Labs for testing
designated_labs <- c("Baguio General Hospital and Medical Center",
                     "Lung Center of the Philippines (LCP)",
                     "Research Institute for Tropical Medicine (RITM)",
                     "San Lazaro Hospital (SLH)",
                     "Vicente Sotto Memorial Medical Center (VSMMC)",
                     "Southern Philippines Medical Center (SPMC)",
                     "Caraga Regional Hospital GeneXpert Laboratory"
)

## diagnostic supplies  ####
diagnostic_supplies <- c(
  "diagnostic_boxes_supplies_row_stockout",
  "diagnostic_safety_supplies_stockout",
  "diagnostic_manual_supplies_stockout",
  "diagnostic_ppe_supplies_stockout",
  "diagnostic_gloves_supplies_stockout",
  "diagnostic_micropipette_supplies_stockout",
  "diagnostic_transport_supplies_row_stockout",
  "diagnostic_kit_supplies_stockout"
)

##diagnostic equipment ####
#there is a typo in speciment printer
diagnostic_equipment <- c(
  "specimen_refrigerator_row_functional",
  "specimen_rack_row_functional",
  "speciment_printer_row_functional", 
  "specimen_microcentrifuge_row_functional",
  "specimen_minifuge_row_functional",
  "specimen_micropippete_row_functional"
)

ppe_stockout_columns <- c("ppe_checklist_n95mask_stockout",
                          "ppe_checklist_gown_stockout",
                          "ppe_checklist_surgicalmask_stockout",
                          "ppe_checklist_gloves_stockout",
                          "ppe_checklist_ppe_stockout")
```

#####   Load packages

```{r load_packages, warning=F}

packages <- c("httr", "tidyverse", "jsonlite", "stringi")

for(i in 1:length(packages)) {
  if(!packages[i]%in%installed.packages()) {
    install.packages(packages[i], char)
  }
  library(packages[i], character.only = T, verbose = T)
  print(paste0("Loaded package: ", packages))
}

```

#####   Load ETL functions

```{r ETL_functions, warning=F}

getKoBo <- function(.url,
                    .auth) {
  if(!methods::hasArg(.auth)|!is.list(.auth)) {
    stop(".auth must be a list of credentials containing either the username and password, or the token")
         }
  if("token"%in%ls(.auth)) {
    .auth <- httr::add_headers(Authorization = paste0("Token ", .auth$token))
  } else if (c("password")%in%ls(.auth) & c("username")%in%ls(.auth)) {
    .auth <- httr::authenticate(.auth$username,
                                .auth$password)
  } else {
    stop(".auth must be a list of credentials containing either the username and password, or the token")
    }
  .data <- httr::GET(.url,
                     .auth
                     )
  return(.data)
}

getData <- function(.id, .auth, .version = "v2") {
  if(!methods::hasArg(.id)|!is.character(.id)) {stop(".id must be a string")}
  .url <- switch(.version,
         v1 = paste0(endpoints$data["v1"], .id, ".csv"),
         v2 = paste0(endpoints$data["v2"], .id, "/data")
  )
  getKoBo(.url,
          .auth)
}

cleanData <- function(.data) {
  if(!(hasArg(.data)&("data.frame"%in%class(.data)))) {
    stop(".data is missing or is not a data.frame")
  }
    .data <- .data%>%select(-contains(c("version", "uuid", "instance", "deprecated", "geolocation", "xform")))
    
    #remove unwanted columns
    names(.data) <- names(.data)%>%str_remove_all("^begin.*/") #removes the begin_group.../ in column names
    names(.data) <- names(.data)%>%str_replace_all("/", "_") #removes the _ at the beginning
    names(.data) <- names(.data)%>%str_remove("^_+") #removes the _ at the beginning
    
    
    #Converts the enye in Las Pinas to normal N
    #in general I want to avoid non regular letters
    #never use roman numerals
    .data$name_of_hospital <- .data$name_of_hospital%>%stri_trans_general(id = "Latin-ASCII")
    
    .data <- .data%>%mutate(
      facility_type = case_when(
        name_of_hospital %in% recipient_list$facility_name[recipient_list$facility_type=="DOH"] ~ "DOH",
        name_of_hospital %in% recipient_list$facility_name[recipient_list$facility_type=="LGU"] ~ "LGU"
      ))
    
    ###add facility type, region and island columns using facility name as id 
    .data <- merge.data.frame(.data, recipient_list[, c("facility_name", "region")],
                                          by.x = "name_of_hospital",
                                          by.y = "facility_name")
    
    
    
    .data <- .data%>%mutate(island_group = case_when(
      region %in% c("01","02","03","04A","04B","05","CAR") ~ "Luzon",
      region %in% c("06","07","08") ~ "Visayas",
      region %in% c("09","10","11","12","13","BARMM") ~ "Mindanao",
      region %in% "NCR" ~ "NCR"
    ))
    
    .data$island_group <- factor(.data$island_group,
                                 levels = c("NCR",
                                            "Luzon",
                                            "Visayas",
                                            "Mindanao")
    )

    .data$submission_date <- as.Date(as.Date(.data$submission_time)-10)
    .data$monitoring_cycle <- format(as.Date(.data$submission_date), "%Y-%m")
    
    .data <- .data
    
}


 # Loads the csv that contains the recipient list
readHelper <- function() {
  assign("allocation_list",
         readRDS("allocation_list.RDS"),
         envir = .GlobalEnv)
  assign("recipient_list",
         readRDS("recipient_list.RDS"),
         envir = .GlobalEnv)
}

readHelper()


```
#####   Get form data

```{r load_forms, warning=F}

#Load form data

form_a <- getData("563698", auth, .version = "v1")%>%
  content("text", encoding = "UTF-8")%>%
  read_csv()%>%
  cleanData()

form_b <- getData("564849", auth, .version = "v1")%>%
  content("text", encoding = "UTF-8")%>%
  read_csv()%>%
  cleanData()

form_b2 <- getData("650795", auth, .version = "v1")%>%
  content("text", encoding = "UTF-8")%>%
  read_csv()%>%
  cleanData()


```

## Form A

```{r form_aDT}
#| column: screen

DT::datatable(form_a)

```

```{r}

DOH_facilities <- recipient_list%>%filter(facility_type == "DOH")

form_a_latest <- form_a%>%group_by(name_of_hospital)%>%
  filter(submission_time == max(submission_time),
         facility_type == "DOH")%>%
  select(name_of_hospital,
         region,
         submission_time,
         facility_type,
         all_of(ppe_stockout_columns))%>%
  ungroup()%>%
  right_join(DOH_facilities, by = c("name_of_hospital" = "facility_name"))%>%
  filter(name_of_hospital != "Southern Tagalog Regional Hospital Molecular Laboratory")%>%
  select(!ends_with(c("x",
                      "X"))
         )



```

### leaflet

```{r}
#| column: screen

library(leaflet)
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
```